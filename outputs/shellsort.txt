1 Function Empty shellsort(Int array[5], Int n) Open

              [0001, 0001] (0017,          RW_FUNCTION) {Function}
              [0001, 0002] (0038,             RW_EMPTY) {Empty}
              [0001, 0003] (0001,                   ID) {shellsort}
              [0001, 0004] (0046,            DEL_OPENP) {(}
              [0001, 0005] (0024,               RW_INT) {Int}
              [0001, 0006] (0001,                   ID) {array}
              [0001, 0007] (0049,          DEL_OPENBRA) {[}
              [0001, 0008] (0040,              CTE_INT) {5}
              [0001, 0009] (0048,           DEL_ENDBRA) {]}
              [0001, 0010] (0050,            DEL_COMMA) {,}
              [0001, 0011] (0024,               RW_INT) {Int}
              [0001, 0012] (0001,                   ID) {n}
              [0001, 0013] (0047,           DEL_CLOSEP) {)}
              [0001, 0014] (0032,              RW_OPEN) {Open}
2               Int c, j;

              [0002, 0001] (0024,               RW_INT) {Int}
              [0002, 0002] (0001,                   ID) {c}
              [0002, 0003] (0050,            DEL_COMMA) {,}
              [0002, 0004] (0001,                   ID) {j}
              [0002, 0005] (0051,             DEL_SEMI) {;}
3         Int h = 1;

              [0003, 0001] (0024,               RW_INT) {Int}
              [0003, 0002] (0001,                   ID) {h}
              [0003, 0003] (0013,               OP_NOT) {=}
              [0003, 0004] (0040,              CTE_INT) {1}
              [0003, 0005] (0051,             DEL_SEMI) {;}
4

5         While (h < n) Open

              [0005, 0001] (0019,             RW_WHILE) {While}
              [0005, 0002] (0046,            DEL_OPENP) {(}
              [0005, 0003] (0001,                   ID) {h}
              [0005, 0004] (0007,              OP_LESS) {<}
              [0005, 0005] (0001,                   ID) {n}
              [0005, 0006] (0047,           DEL_CLOSEP) {)}
              [0005, 0007] (0032,              RW_OPEN) {Open}
6                       h = h * 3 + 1;

              [0006, 0001] (0001,                   ID) {h}
              [0006, 0002] (0013,               OP_NOT) {=}
              [0006, 0003] (0001,                   ID) {h}
              [0006, 0004] (0005,               OP_MUL) {*}
              [0006, 0005] (0040,              CTE_INT) {3}
              [0006, 0006] (0002,               OP_SUM) {+}
              [0006, 0007] (0040,              CTE_INT) {1}
              [0006, 0008] (0051,             DEL_SEMI) {;}
7               Close

              [0007, 0001] (0033,             RW_CLOSE) {Close}
8

9               h = h / 3;

              [0009, 0001] (0001,                   ID) {h}
              [0009, 0002] (0013,               OP_NOT) {=}
              [0009, 0003] (0001,                   ID) {h}
              [0009, 0004] (0004,               OP_DIV) {/}
              [0009, 0005] (0040,              CTE_INT) {3}
              [0009, 0006] (0051,             DEL_SEMI) {;}
10

11              While(h > 0) Open

              [0011, 0001] (0019,             RW_WHILE) {While}
              [0011, 0002] (0046,            DEL_OPENP) {(}
              [0011, 0003] (0001,                   ID) {h}
              [0011, 0004] (0006,           OP_GREATER) {>}
              [0011, 0005] (0040,              CTE_INT) {0}
              [0011, 0006] (0047,           DEL_CLOSEP) {)}
              [0011, 0007] (0032,              RW_OPEN) {Open}
12

13                      For (Int i = h, 1, n) Open

              [0013, 0001] (0020,               RW_FOR) {For}
              [0013, 0002] (0046,            DEL_OPENP) {(}
              [0013, 0003] (0024,               RW_INT) {Int}
              [0013, 0004] (0001,                   ID) {i}
              [0013, 0005] (0013,               OP_NOT) {=}
              [0013, 0006] (0001,                   ID) {h}
              [0013, 0007] (0050,            DEL_COMMA) {,}
              [0013, 0008] (0040,              CTE_INT) {1}
              [0013, 0009] (0050,            DEL_COMMA) {,}
              [0013, 0010] (0001,                   ID) {n}
              [0013, 0011] (0047,           DEL_CLOSEP) {)}
              [0013, 0012] (0032,              RW_OPEN) {Open}
14

15                     c = array[i];

              [0015, 0001] (0001,                   ID) {c}
              [0015, 0002] (0013,               OP_NOT) {=}
              [0015, 0003] (0001,                   ID) {array}
              [0015, 0004] (0049,          DEL_OPENBRA) {[}
              [0015, 0005] (0001,                   ID) {i}
              [0015, 0006] (0048,           DEL_ENDBRA) {]}
              [0015, 0007] (0051,             DEL_SEMI) {;}
16                     j = i;

              [0016, 0001] (0001,                   ID) {j}
              [0016, 0002] (0013,               OP_NOT) {=}
              [0016, 0003] (0001,                   ID) {i}
              [0016, 0004] (0051,             DEL_SEMI) {;}
17

18                     While (j >= h And array[j - h] > c) Open

              [0018, 0001] (0019,             RW_WHILE) {While}
              [0018, 0002] (0046,            DEL_OPENP) {(}
              [0018, 0003] (0001,                   ID) {j}
              [0018, 0004] (0009,            OP_EQUALG) {>=}
              [0018, 0005] (0001,                   ID) {h}
              [0018, 0006] (0011,               OP_AND) {And}
              [0018, 0007] (0001,                   ID) {array}
              [0018, 0008] (0049,          DEL_OPENBRA) {[}
              [0018, 0009] (0001,                   ID) {j}
              [0018, 0010] (0003,               OP_SUB) {-}
              [0018, 0011] (0001,                   ID) {h}
              [0018, 0012] (0048,           DEL_ENDBRA) {]}
              [0018, 0013] (0006,           OP_GREATER) {>}
              [0018, 0014] (0001,                   ID) {c}
              [0018, 0015] (0047,           DEL_CLOSEP) {)}
              [0018, 0016] (0032,              RW_OPEN) {Open}
19

20                             array[j] = array[j - h];

              [0020, 0001] (0001,                   ID) {array}
              [0020, 0002] (0049,          DEL_OPENBRA) {[}
              [0020, 0003] (0001,                   ID) {j}
              [0020, 0004] (0048,           DEL_ENDBRA) {]}
              [0020, 0005] (0013,               OP_NOT) {=}
              [0020, 0006] (0001,                   ID) {array}
              [0020, 0007] (0049,          DEL_OPENBRA) {[}
              [0020, 0008] (0001,                   ID) {j}
              [0020, 0009] (0003,               OP_SUB) {-}
              [0020, 0010] (0001,                   ID) {h}
              [0020, 0011] (0048,           DEL_ENDBRA) {]}
              [0020, 0012] (0051,             DEL_SEMI) {;}
21                             j = j - h;

              [0021, 0001] (0001,                   ID) {j}
              [0021, 0002] (0013,               OP_NOT) {=}
              [0021, 0003] (0001,                   ID) {j}
              [0021, 0004] (0003,               OP_SUB) {-}
              [0021, 0005] (0001,                   ID) {h}
              [0021, 0006] (0051,             DEL_SEMI) {;}
22

23                     Close

              [0023, 0001] (0033,             RW_CLOSE) {Close}
24

25                     array[j] = c;

              [0025, 0001] (0001,                   ID) {array}
              [0025, 0002] (0049,          DEL_OPENBRA) {[}
              [0025, 0003] (0001,                   ID) {j}
              [0025, 0004] (0048,           DEL_ENDBRA) {]}
              [0025, 0005] (0013,               OP_NOT) {=}
              [0025, 0006] (0001,                   ID) {c}
              [0025, 0007] (0051,             DEL_SEMI) {;}
26                      Close

              [0026, 0001] (0033,             RW_CLOSE) {Close}
27

28                      h = h / 2;

              [0028, 0001] (0001,                   ID) {h}
              [0028, 0002] (0013,               OP_NOT) {=}
              [0028, 0003] (0001,                   ID) {h}
              [0028, 0004] (0004,               OP_DIV) {/}
              [0028, 0005] (0040,              CTE_INT) {2}
              [0028, 0006] (0051,             DEL_SEMI) {;}
29

30              Close

              [0030, 0001] (0033,             RW_CLOSE) {Close}
31

32              Back;

              [0032, 0001] (0018,              RW_BACK) {Back}
              [0032, 0002] (0051,             DEL_SEMI) {;}
33

34      Close

              [0034, 0001] (0033,             RW_CLOSE) {Close}
35

36 Function Int Main ( ) Open

              [0036, 0001] (0017,          RW_FUNCTION) {Function}
              [0036, 0002] (0024,               RW_INT) {Int}
              [0036, 0003] (0037,              RW_MAIN) {Main}
              [0036, 0004] (0046,            DEL_OPENP) {(}
              [0036, 0005] (0047,           DEL_CLOSEP) {)}
              [0036, 0006] (0032,              RW_OPEN) {Open}
37              Int n, current;

              [0037, 0001] (0024,               RW_INT) {Int}
              [0037, 0002] (0001,                   ID) {n}
              [0037, 0003] (0050,            DEL_COMMA) {,}
              [0037, 0004] (0001,                   ID) {current}
              [0037, 0005] (0051,             DEL_SEMI) {;}
38              Print('Insira o tamanho do array: ');

              [0038, 0001] (0035,             RW_PRINT) {Print}
              [0038, 0002] (0046,            DEL_OPENP) {(}
              [0038, 0003] (0043,              CTE_STR) {'Insira o tamanho do array: '}
              [0038, 0004] (0047,           DEL_CLOSEP) {)}
              [0038, 0005] (0051,             DEL_SEMI) {;}
39              Scan(n);

              [0039, 0001] (0034,              RW_SCAN) {Scan}
              [0039, 0002] (0046,            DEL_OPENP) {(}
              [0039, 0003] (0001,                   ID) {n}
              [0039, 0004] (0047,           DEL_CLOSEP) {)}
              [0039, 0005] (0051,             DEL_SEMI) {;}
40

41              Int array[n];

              [0041, 0001] (0024,               RW_INT) {Int}
              [0041, 0002] (0001,                   ID) {array}
              [0041, 0003] (0049,          DEL_OPENBRA) {[}
              [0041, 0004] (0001,                   ID) {n}
              [0041, 0005] (0048,           DEL_ENDBRA) {]}
              [0041, 0006] (0051,             DEL_SEMI) {;}
42

43              Print('Insira os elementos do array: ');

              [0043, 0001] (0035,             RW_PRINT) {Print}
              [0043, 0002] (0046,            DEL_OPENP) {(}
              [0043, 0003] (0043,              CTE_STR) {'Insiraos elementos do array: '}
              [0043, 0004] (0047,           DEL_CLOSEP) {)}
              [0043, 0005] (0051,             DEL_SEMI) {;}
44

45         For (Int i = 0, 1, n) Open

              [0045, 0001] (0020,               RW_FOR) {For}
              [0045, 0002] (0046,            DEL_OPENP) {(}
              [0045, 0003] (0024,               RW_INT) {Int}
              [0045, 0004] (0001,                   ID) {i}
              [0045, 0005] (0013,               OP_NOT) {=}
              [0045, 0006] (0040,              CTE_INT) {0}
              [0045, 0007] (0050,            DEL_COMMA) {,}
              [0045, 0008] (0040,              CTE_INT) {1}
              [0045, 0009] (0050,            DEL_COMMA) {,}
              [0045, 0010] (0001,                   ID) {n}
              [0045, 0011] (0047,           DEL_CLOSEP) {)}
              [0045, 0012] (0032,              RW_OPEN) {Open}
46              Scan(array[i]);

              [0046, 0001] (0034,              RW_SCAN) {Scan}
              [0046, 0002] (0046,            DEL_OPENP) {(}
              [0046, 0003] (0001,                   ID) {array}
              [0046, 0004] (0049,          DEL_OPENBRA) {[}
              [0046, 0005] (0001,                   ID) {i}
              [0046, 0006] (0048,           DEL_ENDBRA) {]}
              [0046, 0007] (0047,           DEL_CLOSEP) {)}
              [0046, 0008] (0051,             DEL_SEMI) {;}
47         Close

              [0047, 0001] (0033,             RW_CLOSE) {Close}
48

49         Print('Valores adicionados: ');

              [0049, 0001] (0035,             RW_PRINT) {Print}
              [0049, 0002] (0046,            DEL_OPENP) {(}
              [0049, 0003] (0043,              CTE_STR) {'Valores adicionados: '}
              [0049, 0004] (0047,           DEL_CLOSEP) {)}
              [0049, 0005] (0051,             DEL_SEMI) {;}
50

51         For (Int i = 0, 1, n) Open

              [0051, 0001] (0020,               RW_FOR) {For}
              [0051, 0002] (0046,            DEL_OPENP) {(}
              [0051, 0003] (0024,               RW_INT) {Int}
              [0051, 0004] (0001,                   ID) {i}
              [0051, 0005] (0013,               OP_NOT) {=}
              [0051, 0006] (0040,              CTE_INT) {0}
              [0051, 0007] (0050,            DEL_COMMA) {,}
              [0051, 0008] (0040,              CTE_INT) {1}
              [0051, 0009] (0050,            DEL_COMMA) {,}
              [0051, 0010] (0001,                   ID) {n}
              [0051, 0011] (0047,           DEL_CLOSEP) {)}
              [0051, 0012] (0032,              RW_OPEN) {Open}
52             current = array[i];

              [0052, 0001] (0001,                   ID) {current}
              [0052, 0002] (0013,               OP_NOT) {=}
              [0052, 0003] (0001,                   ID) {array}
              [0052, 0004] (0049,          DEL_OPENBRA) {[}
              [0052, 0005] (0001,                   ID) {i}
              [0052, 0006] (0048,           DEL_ENDBRA) {]}
              [0052, 0007] (0051,             DEL_SEMI) {;}
53              Printnl(current);

              [0053, 0001] (0036,           RW_PRINTNL) {Printnl}
              [0053, 0002] (0046,            DEL_OPENP) {(}
              [0053, 0003] (0001,                   ID) {current}
              [0053, 0004] (0047,           DEL_CLOSEP) {)}
              [0053, 0005] (0051,             DEL_SEMI) {;}
54         Close

              [0054, 0001] (0033,             RW_CLOSE) {Close}
55

56              shellsort(array[n], n);

              [0056, 0001] (0001,                   ID) {shellsort}
              [0056, 0002] (0046,            DEL_OPENP) {(}
              [0056, 0003] (0001,                   ID) {array}
              [0056, 0004] (0049,          DEL_OPENBRA) {[}
              [0056, 0005] (0001,                   ID) {n}
              [0056, 0006] (0048,           DEL_ENDBRA) {]}
              [0056, 0007] (0050,            DEL_COMMA) {,}
              [0056, 0008] (0001,                   ID) {n}
              [0056, 0009] (0047,           DEL_CLOSEP) {)}
              [0056, 0010] (0051,             DEL_SEMI) {;}
57

58              Print('Valores ordenados: ');

              [0058, 0001] (0035,             RW_PRINT) {Print}
              [0058, 0002] (0046,            DEL_OPENP) {(}
              [0058, 0003] (0043,              CTE_STR) {'Valores ordenados: '}
              [0058, 0004] (0047,           DEL_CLOSEP) {)}
              [0058, 0005] (0051,             DEL_SEMI) {;}
59

60         For (Int i = 0, 1, n) Open

              [0060, 0001] (0020,               RW_FOR) {For}
              [0060, 0002] (0046,            DEL_OPENP) {(}
              [0060, 0003] (0024,               RW_INT) {Int}
              [0060, 0004] (0001,                   ID) {i}
              [0060, 0005] (0013,               OP_NOT) {=}
              [0060, 0006] (0040,              CTE_INT) {0}
              [0060, 0007] (0050,            DEL_COMMA) {,}
              [0060, 0008] (0040,              CTE_INT) {1}
              [0060, 0009] (0050,            DEL_COMMA) {,}
              [0060, 0010] (0001,                   ID) {n}
              [0060, 0011] (0047,           DEL_CLOSEP) {)}
              [0060, 0012] (0032,              RW_OPEN) {Open}
61             current = array[i];

              [0061, 0001] (0001,                   ID) {current}
              [0061, 0002] (0013,               OP_NOT) {=}
              [0061, 0003] (0001,                   ID) {array}
              [0061, 0004] (0049,          DEL_OPENBRA) {[}
              [0061, 0005] (0001,                   ID) {i}
              [0061, 0006] (0048,           DEL_ENDBRA) {]}
              [0061, 0007] (0051,             DEL_SEMI) {;}
62              Printnl(current);

              [0062, 0001] (0036,           RW_PRINTNL) {Printnl}
              [0062, 0002] (0046,            DEL_OPENP) {(}
              [0062, 0003] (0001,                   ID) {current}
              [0062, 0004] (0047,           DEL_CLOSEP) {)}
              [0062, 0005] (0051,             DEL_SEMI) {;}
63         Close

              [0063, 0001] (0033,             RW_CLOSE) {Close}
64

65              Back 0;

              [0065, 0001] (0018,              RW_BACK) {Back}
              [0065, 0002] (0040,              CTE_INT) {0}
              [0065, 0003] (0051,             DEL_SEMI) {;}
66 Close
              [0066, 0001] (0033,             RW_CLOSE) {Close}
              [0066, 0001] (0057,                  EOF) {EOF}
